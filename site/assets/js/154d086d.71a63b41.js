"use strict";(self.webpackChunkhomepage=self.webpackChunkhomepage||[]).push([[259],{8583:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return d},default:function(){return g}});var a=t(7462),s=t(3366),o=(t(7294),t(3905)),r=["components"],i={sidebar_position:2},l="MyAlgo Connect API",c={unversionedId:"getting-started/myalgo-connect-api",id:"getting-started/myalgo-connect-api",isDocsHomePage:!1,title:"MyAlgo Connect API",description:"MyAlgo Connect offers 3 methods, summarized here.",source:"@site/docs/getting-started/myalgo-connect-api.md",sourceDirName:"getting-started",slug:"/getting-started/myalgo-connect-api",permalink:"/docs/getting-started/myalgo-connect-api",editUrl:"https://github.com/randlabs/myalgo-connect-homepage/edit/master/docs/getting-started/myalgo-connect-api.md",version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"sidebar",previous:{title:"Quick Start",permalink:"/docs/getting-started/quickstart"},next:{title:"Choosing Network",permalink:"/docs/getting-started/choosing-network"}},d=[{value:"connect()",id:"connect",children:[]},{value:"signTransaction()",id:"signtransaction",children:[]},{value:"signLogicSig()",id:"signlogicsig",children:[]}],p={toc:d};function g(e){var n=e.components,t=(0,s.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"myalgo-connect-api"},"MyAlgo Connect API"),(0,o.kt)("p",null,"MyAlgo Connect offers 3 methods, summarized here."),(0,o.kt)("h2",{id:"connect"},"connect()"),(0,o.kt)("p",null,"Request the user to give access to the dapp and which account(s) to share (only the public data).\nIn order to request a signature from the user or have the user approve a transaction, one must be able to access the user's wallet address.\nConnect method allows the dapp to know the list of addresses allowed by the user for future signatures."),(0,o.kt)("p",null,"The Connect method is agnostic for all networks."),(0,o.kt)("h4",{id:"fingerprint"},"Fingerprint"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"export interface Accounts {\n  address: Address;\n  name: string;\n}\n\nexport interface ConnectionSettings {\n  shouldSelectOneAccount: boolean; \n}\n\nconnect(settings?: ConnectionSettings): Promise<Accounts[]>;\n")),(0,o.kt)("h4",{id:"params"},"Params"),(0,o.kt)("p",null,"Object ",(0,o.kt)("inlineCode",{parentName:"p"},"settings")," with the following field(s):\n",(0,o.kt)("inlineCode",{parentName:"p"},"shouldSelectOneAccount"),": Users are allowed to select just one account. Default is false."),(0,o.kt)("h4",{id:"response"},"Response"),(0,o.kt)("p",null,"Will return an array of an Account object, which contains the public wallet(s) data selected by the user in the \u201cManage your account\u201d section."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "address": "46QNIYQEMLKNOBTQC56UEBBHFNH37EWLHGT2KGL3ZGB4SW77W6V7GBKPDY",\n    "name": "Wallet #1"\n  }\n]\n')),(0,o.kt)("p",null,"If the user closes the popup, Promise will be rejected with an error message. These cases need to be handled by the application being developed."),(0,o.kt)("h2",{id:"signtransaction"},"signTransaction()"),(0,o.kt)("p",null,"Allows you to send Algorand transaction(s) to MyAlgo Connect to be signed by the user.\nTransactions will be validated against our own set of validations and then for the AlgoSDK, just in case some transaction fails, the whole set of transactions will be rejected."),(0,o.kt)("h4",{id:"fingerprint-1"},"Fingerprint"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"export type Address = string;\nexport type Base64 = string;\nexport type TxHash = string;\nexport type EncodedTransaction = Base64 | Uint8Array;\nexport type AlgorandTxn = PaymentTxn | AssetTxn | AssetConfigTxn | AssetCreateTxn | DestroyAssetTxn | FreezeAssetTxn | KeyRegTxn | ApplTxn;\n \nexport interface SignedTx {\n   txID: TxHash;\n   blob: Uint8Array;\n}\n \nsignTransaction(transaction: AlgorandTxn | EncodedTransaction | AlgorandTxn[] | EncodedTransaction[]): Promise<SignedTx | SignerdTx[]>;\n")),(0,o.kt)("h4",{id:"params-1"},"Params"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"transaction"),": an array or a single transaction of the following types: ",(0,o.kt)("strong",{parentName:"p"},"AlgorandTxn"),", ",(0,o.kt)("strong",{parentName:"p"},"EncodedTransaction"),"."),(0,o.kt)("h4",{id:"response-1"},"Response"),(0,o.kt)("p",null,"Calling signTransaction with an array of transactions will return an array of a SignedTx object. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'[\n   {\n       "txID": "XC2PBS2UM4AQOVW47G6INYC7RNGSOHWRXGPOAPHLY74JOJY6C3QA",\n       "blob": {\n        "0": 130,\n        "1": 163,\n        ...\n        "245": 97,\n        "246": 121\n       }\n   },\n   {\n       "txID": "E2S4JVCC76PBW6UBLMOKZA2CSJE36OFBRJEZY3AGFZMIRSFSEZKQ",\n       "blob": {\n        "0": 130,\n        "1": 163,\n        ...\n        "245": 97,\n        "246": 121\n       }\n   }\n]\n')),(0,o.kt)("p",null,"Otherwise, it will return a SignedTx object."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "txID": "XC2PBS2UM4AQOVW47G6INYC7RNGSOHWRXGPOAPHLY74JOJY6C3QA",\n  "blob": {\n  "0": 130,\n  "1": 163,\n  ...\n  "245": 97,\n  "246": 121\n  }\n}\n')),(0,o.kt)("h4",{id:"considerations"},"Considerations"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Transactions that are sent to sign must have the same network. Otherwise, they will be rejected."),(0,o.kt)("li",{parentName:"ul"},"Different addresses are allowed to be specified as a sender (\u201cfrom\u201d) in transaction(s), however, the address(es) should be a subset of the accounts shared by the user previously selected in the connect method."),(0,o.kt)("li",{parentName:"ul"},"Rekey transactions will be signed by the corresponding wallet in case it belongs to the set of wallet shared by the user, this process is automatic and you don\u2019t need to do anything in particular.")),(0,o.kt)("h2",{id:"signlogicsig"},"signLogicSig()"),(0,o.kt)("p",null,"Sends to MyAlgo Connect an Algorand program to be signed by the user."),(0,o.kt)("h4",{id:"fingerprint-2"},"Fingerprint"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"export type Address = string;\nexport type Base64 = string;\n\nsignLogicSig(logic: Uint8Array | Base64, address: Address): Promise<Uint8Array>;\n")),(0,o.kt)("h4",{id:"params-2"},"Params"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Logic"),":  TEAL program to be signed by the user."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Address"),": Signer\u2019s Address."),(0,o.kt)("h4",{id:"response-2"},"Response"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'// Uint8Array\n{\n  "0": 248,\n  "1": 77,\n  "2": 132,\n  ...\n  "61": 28,\n  "62": 131,\n  "63": 14\n}\n')))}g.isMDXComponent=!0}}]);