"use strict";(self.webpackChunkhomepage=self.webpackChunkhomepage||[]).push([[53],{5240:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return d},default:function(){return g}});var a=n(7462),o=n(3366),s=(n(7294),n(3905)),r=["components"],i={id:"quickstart",sidebar_position:1},l="Quick Start",c={unversionedId:"getting-started/quickstart",id:"getting-started/quickstart",isDocsHomePage:!1,title:"Quick Start",description:"This section will cover a common dev flow to request the user's public wallet data, create a transaction, request the user to sign it, and finally send it to the network.",source:"@site/docs/getting-started/quick-start.md",sourceDirName:"getting-started",slug:"/getting-started/quickstart",permalink:"/docs/getting-started/quickstart",editUrl:"https://github.com/randlabs/myalgo-connect-homepage/edit/master/docs/getting-started/quick-start.md",version:"current",sidebarPosition:1,frontMatter:{id:"quickstart",sidebar_position:1},sidebar:"sidebar",previous:{title:"Introduction",permalink:"/docs/introduction"},next:{title:"MyAlgo Connect API",permalink:"/docs/getting-started/myalgo-connect-api"}},d=[{value:"Install",id:"install",children:[]},{value:"Get user\u2019s wallet (only public data)",id:"get-users-wallet-only-public-data",children:[]},{value:"Create and sign transactions",id:"create-and-sign-transactions",children:[]},{value:"Send Transactions to the Network",id:"send-transactions-to-the-network",children:[]}],u={toc:d};function g(t){var e=t.components,n=(0,o.Z)(t,r);return(0,s.kt)("wrapper",(0,a.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"quick-start"},"Quick Start"),(0,s.kt)("p",null,"This section will cover a common dev flow to request the user's public wallet data, create a transaction, request the user to sign it, and finally send it to the network."),(0,s.kt)("h3",{id:"install"},"Install"),(0,s.kt)("p",null,"To integrate MyAlgo Connect to your webapp, first you need to integrate the MyAlgo Connect library into your project by installing it with Node Package Management:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"npm install @randlabs/myalgo-connect\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Minified version")," can be found in our ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("a",{parentName:"strong",href:"https://github.com/randlabs/myalgo-connect/releases"},"Github Repository")),"."),(0,s.kt)("h3",{id:"get-users-wallet-only-public-data"},"Get user\u2019s wallet (only public data)"),(0,s.kt)("p",null,"Once the MyAlgo Connect library is integrated, you are ready to interact with the user.\nYou first need to request permission to connect to the user\u2019s wallet in order to get the user\u2019s address(es)."),(0,s.kt)("p",null,"To do so, you need to call a ",(0,s.kt)("inlineCode",{parentName:"p"},"connect()")," method inside a function that has been triggered by a click event. A new browser window will open requesting permission to share the user\u2019s public wallet data to the website and a selection of the account(s) the user wishes to connect to the Client application. If the user accepts, it will return an array with the account addresses previously selected, if not, the ",(0,s.kt)("inlineCode",{parentName:"p"},"connect()")," method will throw an error."),(0,s.kt)("p",null,"All of this is done with the following code:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"import MyAlgoConnect from '@randlabs/myalgo-connect';\n \nconst myAlgoConnect = new MyAlgoConnect();\n\nconst accountsSharedByUser = await myAlgoConnect.connect()\n")),(0,s.kt)("h3",{id:"create-and-sign-transactions"},"Create and sign transactions"),(0,s.kt)("p",null,"The next step, signing a transaction or a set of transactions with ",(0,s.kt)("strong",{parentName:"p"},"MyAlgo Connect"),", is accomplished by first creating the transaction itself."),(0,s.kt)("p",null,"There are two options to create transactions accepted by MyAlgo Connect:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Use ",(0,s.kt)("strong",{parentName:"li"},(0,s.kt)("a",{parentName:"strong",href:"https://www.npmjs.com/package/algosdk"},"AlgoSDK"))," EncodedTransaction (Supported in MyAlgo 2.0) - ",(0,s.kt)("strong",{parentName:"li"},"Recommended")),(0,s.kt)("li",{parentName:"ul"},"Use MyAlgo Connect\u2019s Json transaction types. For more information about this visit the MyAlgo Connect ",(0,s.kt)("strong",{parentName:"li"},(0,s.kt)("a",{parentName:"strong",href:"https://github.com/randlabs/myalgo-connect"},"Github Repository")),".")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"import algosdk from \"algosdk\";\n  \nconst algodClient = new algosdk.Algodv2(\"\",'https://api.testnet.algoexplorer.io', '');\n\nconst params = await algodClient.getTransactionParams().do();\n\nconst txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n  suggestedParams: {\n      ...params,\n  },\n  from: sender,\n  to: receiver,\n  amount: amount\n  note: note\n});\n")),(0,s.kt)("p",null,"Once you have created the transaction, it can be signed by the user by simply sending it to MyAlgo Connect. To do so use the following line of code: "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"const signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\n")),(0,s.kt)("h3",{id:"send-transactions-to-the-network"},"Send Transactions to the Network"),(0,s.kt)("p",null,"After the user has signed the transaction(s), the object signedTxn should have the final transaction with signature data on it. You can now send it to the network:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"import algosdk from \"algosdk\";\n\nconst algodClient = new algosdk.Algodv2(\u201c\u201d, 'https://api.testnet.algoexplorer.io', '');\n\nconst response = await algodClient.sendRawTransaction(signedTxn.blob).do();\n")))}g.isMDXComponent=!0}}]);